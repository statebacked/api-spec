openapi: "3.0.2"

info:
  title: State Backed API
  description: >
    The official State Backed API for running XState backends as a service.
  version: 1.0.0

servers:
  - url: https://api.statebacked.dev
    description: Production server

x-topics:
  - title: Authentication
    content: |
      # End-user JWT authentication

      Pass the JWT token in the `Authorization` header as `Bearer <token>`.

      ## Use

      State Backed authenticates requests to ensure that they include a valid JWT
      signed by one of your StateBacked keys.

      State Backed also passes the user data from the `act` claim of your JWT to your
      machine's `allowRead` and `allowWrite` functions to allow you to authorize operations
      on machine instances.

      ## Generation

      Use the key (`sbk_...`) and secret (`sbsec_...`) generated from running `smply keys create`
      to sign a JWT token with an `act` claim that includes data about your end user
      (e.g. a `sub` claim with the user's ID).

      ```
      HS256("sbsec_...", { "kid": "sbk_...", "alg": "HS256" }, { "aud": "https://api.statebacked.dev/", "act": { "sub": "..." }, ... })
      ```

      You can also use our token generation library:
      ```
      import { signToken } from "@statebacked/token";

      const jwt = await signToken({
        {
          stateBackedKeyId: process.env.STATEBACKED_KEY_ID,
          stateBackedSecretKey: process.env.STATEBACKED_SECRET_KEY,
        },
        {
          sub: "your-user-id"
        },
        {
          expires: { in: "7d" },
          issuer: "https://your-domain.com/"
        }
      });
      ```

tags:
  - name: Machines
    description: Machine definition operations.
  - name: Machine versions
    description: Machine definition version operations.
  - name: Machine instances
    description: Machine instance operations.

paths:
  /machines:
    summary: Machine definition operations.
    description: |
      Machine definitions name a logical machine from which you can create
      multiple *machine instances*.

      Machine definitions have multiple *machine definition versions*, one
      of which is named as the current version.
    post:
      summary: Create a new machine definition.
      tags:
        - Machines
      security:
        - BearerAuth:
          - "machines.write"
      description: |
        Note: No instances of a machine definition can be created until
        you create a machine definition version for it.
      requestBody:
        $ref: "#/components/requestBodies/CreateMachineDefinition"
      responses:
        "201":
          description: The machine definition was created successfully.
        "403":
          $ref: "#/components/responses/Forbidden"
        "400":
          $ref: "#/components/responses/BadRequest"
  /machines/{machineSlug}:
    post:
      tags:
        - Machine instances
      summary: Create a new machine instance.
      description: |
        Create a new instance of the machine definition with the given slug.

        The `allowWrite` function for the machine definition version will be called
        to authorize the initial transition and, if it fails, a 403 with code
        `rejected-by-machine-authorizer` will be returned.

        Otherwise, the state of the machine instance after the initial transition
        will be returned.

        All top-level events have a 10 second timeout for the machine to settle.
        Settling means that the machine has reached a stable state and has no
        child services running.

        If the machine does not settle within 10 seconds but has completed at least
        one transition successfully, a 200 with the current state will be returned,
        the child services will be stopped, and error events will be delivered for
        each stopped service before the next event is sent.

        If a machine instance for this (`machineSlug`, instance `slug`) already exists,
        a 409 will be returned.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition to create an instance of.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
      security:
        - BearerAuth:
          - "instances.write"
      requestBody:
        $ref: "#/components/requestBodies/CreateMachineInstance"
      responses:
        "200":
          description: The machine instance was created successfully.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/State"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
  /machines/{machineSlug}/i/{instanceSlug}:
    get:
      tags:
        - Machine instances
      summary: Get the current state of a machine instance.
      description: |
        Retrieve the state of the machine instance that was previously created by
        calling `POST /machines/{machineSlug}` and may have had events sent to it
        by calling `POST /machines/{machineSlug}/i/{instanceSlug}/events`.

        The `allowRead` function for the machine definition version will be called
        to authorize the read and, if it fails, a 403 with code
        `rejected-by-machine-authorizer` will be returned.

        Otherwise, the current state of the machine instance will be returned.

        Obviously, the state returned may be out of date by the time it is returned
        because reads are non-blocking but a the returned state will always be
        self-consistent.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: instanceSlug
          in: path
          description: The slug/name for the machine instance.
          required: true
          schema:
            $ref: "#/components/schemas/MachineInstanceSlug"
      security:
        - BearerAuth:
          - "instances.read"
      responses:
        "200":
          description: The state was retrieved successfully.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/State"
        "403":
          $ref: "#/components/responses/Forbidden"
  /machines/{machineSlug}/i/{instanceSlug}/events:
    post:
      tags:
        - Machine instances
      summary: Send an event to a machine instance.
      description: |
        Send an event to the machine instance that was previously created by
        calling `POST /machines/{machineSlug}`.

        The `allowWrite` function for the machine definition version will be called
        to authorize the send and, if it fails, a 403 with code
        `rejected-by-machine-authorizer` will be returned.

        Otherwise, the state of the machine instance after any transitions resulting
        from the event will be returned.

        The request will wait for the machine to settle before returning a response.
        Settling means that the machine has reached a stable state and has no
        child services running.

        All top-level events have a 10 second timeout for the machine to settle.

        If the machine does not settle within 10 seconds but has completed at least
        one transition successfully, a 200 with the current state will be returned,
        the child services will be stopped, and error events will be delivered for
        each stopped service before the next event is sent.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: instanceSlug
          in: path
          description: The slug/name for the machine instance.
          required: true
          schema:
            $ref: "#/components/schemas/MachineInstanceSlug"
      security:
        - BearerAuth:
          - "instances.write"
      requestBody:
        $ref: "#/components/requestBodies/SendMachineInstanceEvent"
      responses:
        "200":
          description: The event was delivered successfully.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/State"
        "403":
          $ref: "#/components/responses/Forbidden"
  /machines/{machineSlug}/v:
    summary: Machine definition version operations.
    description: |
      Machine definition versions are comprised of an XState machine,
      an `allowRead` function, and an `allowWrite` function.

      They are immutable and identified by an ID.
      The `clientInfo` field is informational only.
    post:
      tags:
        - Machine versions
      summary: Provisionally create a new machine definition version.
      description: |
        This operation returns a code upload URL and fields that can be used
        to upload the code for the machine definition version.

        Once the code is uploaded, call `PUT /machines/:machineSlug/v/:machineDefinitionVersionId`
        with the `machineDefinitionVersionId` returned from this operation to
        finalize the creation of the machine definition version.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition this version is related to.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
      security:
        - BearerAuth:
          - "machine-versions.write"
      requestBody:
        $ref: "#/components/requestBodies/ProvisionallyCreateMachineDefinitionVersion"
      responses:
        "200":
          description: |
            The machine definition version was provisionally created successfully.

            Now, post the code for the machine definition version as follows:

            ```
            const { codeUploadFields, codeUploadUrl } = await provisionalVersionCreationResponse.json();
            const uploadForm = new FormData();
            for (const [key, value] of Object.entries(codeUploadFields)) {
              uploadForm.append(key, value as string);
            }
            uploadForm.set("content-type", "application/javascript");
            uploadForm.append(
              "file",
              new Blob(["javascript-code-here"], {
                type: "application/javascript",
              }),
              "your-file-name.js",
            );
            const uploadRes = await fetch(
              codeUploadUrl,
              {
                method: "POST",
                body: uploadForm,
              },
            );
            ```
            
            And then finalize the creation of the machine definition version by
            calling `PUT /machines/:machineSlug/v/:machineDefinitionVersionId` with
            the `machineDefinitionVersionId` returned from this operation.
          content:
            "application/json":
              schema:
                type: object
                properties:
                  machineDefinitionVersionId:
                    $ref: "#/components/schemas/SignedMachineVersionId"
                  codeUploadUrl:
                    type: string
                    description: The URL to upload the machine definition version code to.
                  codeUploadFields:
                    type: object
                    description: The fields that must be included as form data in the upload request.
                    additionalProperties:
                      type: string
        "403":
          $ref: "#/components/responses/Forbidden"
        "400":
          $ref: "#/components/responses/BadRequest"
  /machines/{machineSlug}/v/{signedMachineVersionId}:
    put:
      tags:
        - Machine versions
      summary: Finalize creation of a machine definition version.
      description: |
        After retrieving the `machineDefinitionVersionId` and code upload
        instructions from `POST /machines/:machineSlug/v`, and after
        uploading the code as described, call this operation to finalize
        the creation of the machine definition version.

        After this operation, you can create instances of the machine
        definition with  this version.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition this version is related to.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: signedMachineVersionId
          in: path
          description: The signed machine version id returned from `POST /machines/:machineSlug/v`.
          required: true
          schema:
            $ref: "#/components/schemas/SignedMachineVersionId"
      security:
        - BearerAuth:
          - "machine-versions.write"
      requestBody:
        $ref: "#/components/requestBodies/CreateMachineDefinitionVersion"
      responses:
        "200":
          $ref: "#/components/responses/MachineDefinitionVersionCreated"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  requestBodies:
    CreateMachineDefinition:
      description: Request to create a machine definition.
      content:
        "application/json":
          schema:
            type: object
            required:
              - slug
            properties:
              slug:
                $ref: "#/components/schemas/MachineSlug"
    ProvisionallyCreateMachineDefinitionVersion:
      description: Request to provisionally create a machine definition version.
      content:
        "application/json":
          schema:
            type: object
    CreateMachineDefinitionVersion:
      description: Finalize creation of a machine definition version.
      content:
        "application/json":
          schema:
            type: object
            properties:
              clientInfo:
                type: string
                description: |
                  Informational only. Any string that describes this version.
                  Good uses would be a semantic version number or git commit.
              makeCurrent:
                type: boolean
                description: |
                  Whether to make this version the current version for the machine definition.
                  If `true`, the current version will be set to this version.
                  If `false`, the current version will not be changed.
    CreateMachineInstance:
      description: |
        Request to create an instance of a machine.

        If machineVersionId is provided, creates an instance of the machine
        definition version with that ID. Otherwise, creates an instance of the
        current version of the machine definition.
      content:
        "application/json":
          schema:
            type: object
            required:
              - slug
            properties:
              slug:
                $ref: "#/components/schemas/MachineInstanceSlug"
              context:
                type: object
                description: |
                  The initial context for the machine instance.
                  Defaults to `{}`.
              machineVersionId:
                $ref: "#/components/schemas/MachineVersionId"
    SendMachineInstanceEvent:
      description: |
        Request to send an event to an instance of a machine.
      content:
        "application/json":
          schema:
            type: object
            required:
              - event
            properties:
              event:
                $ref: "#/components/schemas/Event"

  responses:
    BadRequest:
      description: The request was malformed.
      content:
        "application/json":
          schema:
            type: object
            properties:
              error:
                type: string
                description: A description of the error.
              code:
                type: string
                summary: A code specifying the type of error.
                description: |
                  - `specify-org` indicates that the user has access to multiple orgs and the operation requires specifying an organization. Pass the `x-statebacked-org-id` header to specify an org ID.
                enum:
                  - specify-org
    Forbidden:
      description: The request was unauthorized.
      content:
        "application/json":
          schema:
            type: object
            properties:
              error:
                type: string
                description: A description of the error.
              code:
                type: string
                summary: A code specifying the type of error.
                enum:
                  - missing-user
                  - missing-org
                  - missing-scope
                  - rejected-by-machine-authorizer
    Conflict:
      description: The resource already exists.
      content:
        "application/json":
          schema:
            type: object

  schemas:
    MachineSlug:
      type: string
      description: An identifier for the machine definition. Must be unique within your organization.
      pattern: "^[a-z0-9_-]+$"
      minLength: 1
      example: "my-machine"
    SignedMachineVersionId:
      type: string
      description: The signed machine definition version ID.
    MachineVersionId:
      type: string
      description: The ID of a machine definition version.
    MachineInstanceSlug:
      type: string
      description: An identifier for the machine instance. Must be unique within the instances for the associated machine definition.
      minLength: 1
      example: "user-1234"
    State:
      type: object
      description: |
        The state of a machine instance.
      examples:
        Simple state without public context:
          value:
            state: "idle"
            states:
              - idle
        Hierarchical state with public context:
          value:
            state:
              parent:
                nested1: "idle"
            states:
              - parent
              - nested1
              - idle
            publicContext:
              user: "u_1234"
        Parallel state with public context:
          values:
            state:
              parent:
                nested1: "idle"
                nested2: "idle"
            states:
              - parent
              - nested1
              - nested2
              - idle
            publicContext:
              connectedDocuments:
                - doc_1234
                - doc_5678
      required:
        - state
        - states
      properties:
        state:
          description: |
            The state of the machine instance.

            For a machine instance with in a single, top-level state, this will be a string.
            For a machine instance in a hierarchically-nested state, it will be an object
            mapping parent states to child states.
            For a machine instance in a parallel state, it will be an object with multiple
            keys.
          anyof:
            - type: string
            - type: object
              additionalProperties:
                $ref: "#/components/schemas/State"
        states:
          description: |
            A flattened array of the states that the machine instance is in.
            This may be easier to work with than the `state` property.
          type: array
          items:
            type: string
        publicContext:
          description: |
            The public context of the machine instance.

            This includes all context under the `public` key.
          type: object
          additionalProperties: true
    Event:
      description: |
        An event to send to a machine instance.
      anyOf:
        - $ref: "#/components/schemas/EventWithPayload"
        - $ref: "#/components/schemas/EventWithoutPayload"
    EventWithPayload:
      type: object
      description: |
        An event to send to a machine instance with a payload.

        Event types and payloads are user-defined for a given machine definition.
      required:
        - type
      additionalProperties: true
      properties:
        type:
          type: string
          description: |
            The type of the event.
    EventWithoutPayload:
      type: string
      description: |
        An event to send to a machine.

        Event types are user-defined for a given machine definition.
