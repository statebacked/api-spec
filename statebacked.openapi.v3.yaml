openapi: "3.0.2"

info:
  title: State Backed API
  description: |
    The official State Backed API for running XState backends as a service.

    State Backed turns any XState state machine into a stateful backend.
    Spawn instances of your machines, authorize requests,
    send events, and read your instances' state without any servers
    or datastores to manage.

    View the full State Backed documentation at https://docs.statebacked.dev.

    Download the `smply` CLI at https://npmjs.com/package/smply
    or at https://github.com/state-backed/smply/releases.
  version: 1.0.0

servers:
  - url: https://api.statebacked.dev
    description: Production server

externalDocs:
  description: State Backed documentation
  url: https://docs.statebacked.dev

x-topics:
  - title: Authentication
    content: |
      # End-user JWT authentication

      Pass the JWT token in the `Authorization` header as `Bearer <token>`.

      ## Use

      State Backed authenticates requests to ensure that they include a valid JWT
      signed by one of your StateBacked keys.

      State Backed also passes the user data from the `act` claim of your JWT to your
      machine's `allowRead` and `allowWrite` functions to allow you to authorize operations
      on machine instances.

      ## Generation

      Use the key (`sbk_...`) and secret (`sbsec_...`) generated from running `smply keys create`
      to sign a JWT token with an `act` claim that includes data about your end user
      (e.g. a `sub` claim with the user's ID).

      ```
      HS256("sbsec_...", { "kid": "sbk_...", "alg": "HS256" }, { "aud": "https://api.statebacked.dev/", "act": { "sub": "..." }, ... })
      ```

      You can also use our token generation library:
      ```
      import { signToken } from "@statebacked/token";

      const jwt = await signToken({
        {
          stateBackedKeyId: process.env.STATEBACKED_KEY_ID,
          stateBackedSecretKey: process.env.STATEBACKED_SECRET_KEY,
        },
        {
          sub: "your-user-id"
        },
        {
          expires: { in: "7d" },
          issuer: "https://your-domain.com/"
        }
      });
      ```

tags:
  - name: Machines
    description: |
      # Machine definition operations.

      Machine definitions name a logical machine from which you can create
      multiple *machine instances*.

      Machine definitions have multiple *machine definition versions*, one
      of which is named as the current version.
  - name: Machine versions
    description: |
      # Machine definition version operations.

      Machine definition versions contain the actual machine definition,
      which consists of a single self-contained javascript file that
      default exports an [XState](https://xstate.js.org/docs/) state
      machine as well as an `allowRead` and `allowWrite` function.

      The `allowRead` and `allowWrite` functions are called to authorize
      read and write operations on machine instances, respectively.
      Write authorization implies the authority to read the result of
      your write.

      Anything stored in the machine's context under the `public` key
      will be exposed to authorized readers and writers as `publicContext`.

      ## Example machine definition

      ```js
      import type {
        AllowRead,
        AllowWrite,
      } from "@statebacked/machine-def";
      import { createMachine } from "xstate";

      export const allowRead: AllowRead = (
        { machineInstanceName, authContext },
      ) => machineInstanceName === authContext.sub;

      export const allowWrite: AllowWrite = (
        { machineInstanceName, authContext },
      ) => machineInstanceName === authContext.sub;

      export default createMachine(...);
      ```
  - name: Machine version migrations
    description: |
      # Machine version migration operations.

      Machine version migrations are small snippets of code that migrate
      existing machine instances from one machine version to another.
      They consist of a single self-contained javascript file that
      exports `upgradeState` and `upgradeContext` functions.

      ## Example machine version migration

      ```js
      import type {
        UpgradeState,
        UpgradeContext,
      } from "@statebacked/machine-def";

      export const upgradeState: UpgradeState = (oldState, oldContext) => {
        // oldState is an array describing a full path to a state in the old version of the machine
        // (e.g. ["authenticationPage", "login"] if login is a child state of authenticationPage).
        // oldContext is the most recent context of the machine. It *may not* be a valid context in
        // the given state because upgradeState will be called to migrate history states in
        // addition to current states.

        // a simple renaming of a parent state from "authenticationPage" to "newAuthenticationPage".
        return oldState[0] === "authenticationPage" ? ["newAuthenticationPage"].concat(oldState.slice(1)) : oldState;
      };

      export const upgradeContext: UpgradeContext = (oldStates, newStates, oldContext) => {
        // oldStates is an array of state paths from the old version of the machine.
        // (e.g. [["a", "b"], ["a", "c"]] if "a" is a parallel state and is in both "b" and "c").
        // newStates is an array of state paths from the new version of the machine.
        // oldContext is the context associated with oldStates in the old version of the machine.

        return {
          ...oldContext,
          upgradeCount: oldContext.upgradeCount + 1
        };
      };
      ```
  - name: Machine instances
    description: |
      # Machine instance operations.
      
      Machine instances are instances of a machine definition.

      If you have a machine definition that controls a user onboarding flow,
      you would want a machine instance for each user.

      If you have a machine definition that controls access to a collaborative
      document, you would want a machine instance for each document.

      Machine instances have names that are unique within a machine definition.

      You can send events to machine instances to trigger transitions and can
      read the state of an instance.

      ## Consistency guarantees

      Processing for a machine instance is coordinated such that there is
      a single, linearizable history of events and state transitions.

      ## Limits

      Machine context (represented as JSON) may not exceed 400kb.
  - name: Logs
    description: |
      # Logs produced while processing transitions and migrations.

      State Backed collects any logs you emit while processing
      transitions and migrations and makes them available via this
      endpoint.

      State Backed also emits some logs of its own to provide context.

      We *highly* recommend logging structured JSON objects.
  - name: Realtime
    description: |
      # Realtime (websocket) endpoints

      State Backed allows you to subscribe to machine instance updates
      via websockets.

paths:
  /machines:
    summary: Machine definition operations.
    description: |
      Machine definitions name a logical machine from which you can create
      multiple *machine instances*.

      Machine definitions have multiple *machine definition versions*, one
      of which is named as the current version.
    post:
      summary: Create a new machine definition.
      tags:
        - Machines
      security:
        - BearerAuth:
          - "machines.write"
      description: |
        Note: No instances of a machine definition can be created until
        you create a machine definition version for it.
      requestBody:
        $ref: "#/components/requestBodies/CreateMachineDefinition"
      responses:
        "201":
          description: The machine definition was created successfully.
        "403":
          $ref: "#/components/responses/Forbidden"
        "400":
          $ref: "#/components/responses/BadRequest"
  /machines/{machineSlug}:
    post:
      tags:
        - Machine instances
      summary: Create a new machine instance.
      description: |
        Create a new instance of the machine definition with the given slug.

        The `allowWrite` function for the machine definition version will be called
        to authorize the initial transition and, if it fails, a 403 with code
        `rejected-by-machine-authorizer` will be returned.

        Otherwise, the state of the machine instance after the initial transition
        will be returned.

        All top-level events have a 10 second timeout for the machine to settle.
        Settling means that the machine has reached a stable state and has no
        child services running.

        If the machine does not settle within 10 seconds but has completed at least
        one transition successfully, a 200 with the current state will be returned,
        the child services will be stopped, and error events will be delivered for
        each stopped service before the next event is sent.

        If a machine instance for this (`machineSlug`, instance `slug`) already exists,
        a 409 will be returned.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition to create an instance of.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
      security:
        - BearerAuth:
          - "instances.write"
      requestBody:
        $ref: "#/components/requestBodies/CreateMachineInstance"
      responses:
        "200":
          description: The machine instance was created successfully.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/State"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - Machines
      summary: Delete a machine and any versions and migrations associated with it.
      description: |
        Delete a machine and any versions and migrations associated with it.

        *THIS IS OBVIOUSLY A DANGEROUS OPERATION AND WILL INTENTIONALLY CAUSE DATA LOSS*

        If any instances exist for the machine, a 409 error will be returned with an `invalid-state` code.
        You can delete the instances and then retry the machine deletion.

        All versions associated with the machine and all migrations between those versions
        will be deleted.
        
        There is no option to recover data after a machine is deleted.

        To prevent accidental deletion, we require two validation parameters:
          - hmacSha256OfMachineNameWithMachineNameKey - `base64urlEncode(hmacSha256(key = "machine name", "machine name"))`
          - dangerDataWillBeDeletedForever - true

        A 400 error with the `parameter` set to the name of the incorrect parameter will be returned
        if the validation parameters are incorrect.

        This endpoint requires admin access.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition to delete.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
      security:
        - BearerAuth:
          - "machines.admin"
      requestBody:
        $ref: "#/components/requestBodies/DeleteMachine"
      responses:
        "200":
          description: The machine instance was deleted successfully.
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
  /machines/{machineSlug}/i/{instanceSlug}:
    get:
      tags:
        - Machine instances
      summary: Get the current state of a machine instance.
      description: |
        Retrieve the state of the machine instance that was previously created by
        calling `POST /machines/{machineSlug}` and may have had events sent to it
        by calling `POST /machines/{machineSlug}/i/{instanceSlug}/events`.

        The `allowRead` function for the machine definition version will be called
        to authorize the read and, if it fails, a 403 with code
        `rejected-by-machine-authorizer` will be returned.

        Otherwise, the current state of the machine instance will be returned.

        Obviously, the state returned may be out of date by the time it is returned
        because reads are non-blocking but a the returned state will always be
        self-consistent.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: instanceSlug
          in: path
          description: The slug/name for the machine instance.
          required: true
          schema:
            $ref: "#/components/schemas/MachineInstanceSlug"
      security:
        - BearerAuth:
          - "instances.read"
      responses:
        "200":
          description: The state was retrieved successfully.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/State"
        "403":
          $ref: "#/components/responses/Forbidden"
    delete:
      tags:
        - Machine instances
      summary: Delete a machine instance and any transitions, state, or pending upgrades associated with it.
      description: |
        Delete a machine instance and any transitions, state, or pending upgrades associated with it.

        *THIS IS OBVIOUSLY A DANGEROUS OPERATION AND WILL INTENTIONALLY CAUSE DATA LOSS*

        All historical transitions associated with the machine and all current state and context
        will be deleted.
        
        There is no option to recover data after an instance is deleted.

        To prevent accidental deletion, we require two validation parameters:
          - hmacSha256OfMachineInstanceNameWithMachineNameKey - `base64urlEncode(hmacSha256(key = "machine name", "machine instance name"))`
          - dangerDataWillBeDeletedForever - true

        A 400 error with the `parameter` set to the name of the incorrect parameter will be returned
        if the validation parameters are incorrect.

        This endpoint requires admin access.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition to delete.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: instanceSlug
          in: path
          description: The slug/name for the machine instance.
          required: true
          schema:
            $ref: "#/components/schemas/MachineInstanceSlug"
      security:
        - BearerAuth:
          - "instances.admin"
      requestBody:
        $ref: "#/components/requestBodies/DeleteMachineInstance"
      responses:
        "200":
          description: The machine instance was deleted successfully.
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
  /machines/{machineSlug}/i/{instanceSlug}/events:
    post:
      tags:
        - Machine instances
      summary: Send an event to a machine instance.
      description: |
        Send an event to the machine instance that was previously created by
        calling `POST /machines/{machineSlug}`.

        The `allowWrite` function for the machine definition version will be called
        to authorize the send and, if it fails, a 403 with code
        `rejected-by-machine-authorizer` will be returned.

        Otherwise, the state of the machine instance after any transitions resulting
        from the event will be returned.

        The request will wait for the machine to settle before returning a response.
        Settling means that the machine has reached a stable state and has no
        child services running.

        All top-level events have a 10 second timeout for the machine to settle.

        If the machine does not settle within 10 seconds but has completed at least
        one transition successfully, a 200 with the current state will be returned,
        the child services will be stopped, and error events will be delivered for
        each stopped service before the next event is sent.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: instanceSlug
          in: path
          description: The slug/name for the machine instance.
          required: true
          schema:
            $ref: "#/components/schemas/MachineInstanceSlug"
      security:
        - BearerAuth:
          - "instances.write"
      requestBody:
        $ref: "#/components/requestBodies/SendMachineInstanceEvent"
      responses:
        "200":
          description: The event was delivered successfully.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/State"
        "403":
          $ref: "#/components/responses/Forbidden"
  /machines/{machineSlug}/i/{instanceSlug}/v:
    put:
      tags:
        - Machine instances
      summary: Update the desired machine version for an existing instance.
      description: |
        Set the desired machine version for an existing instance.

        The instance will not be upgraded immediately but will be upgraded
        the next time an event is sent to it from a settled state.

        A 400 with code "no-migration-path" will be returned if there is
        no path through the set of existing migrations from the current
        instance version to the desired instance version.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: instanceSlug
          in: path
          description: The slug/name for the machine instance.
          required: true
          schema:
            $ref: "#/components/schemas/MachineInstanceSlug"
      security:
        - BearerAuth:
          - "instances.write"
      requestBody:
        $ref: "#/components/requestBodies/UpdateDesiredMachineInstanceVersion"
      responses:
        "201":
          description: |
            The desired version was recorded successfully and will be applied
            the next time an event is sent to the instance from a settled state.
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
  /machines/{machineSlug}/i/{instanceSlug}/status:
    put:
      tags:
        - Machine instances
      summary: Update the status of a machine instance
      description: |
        Set the status of the machine.

        Machines in the 'paused' status will reject any events sent to them
        with a 409 error with a code of "invalid-state".

        'running' instances will accept events normally.

        It is **dangerous** to set an instance's status to 'paused'!
        You will drop events and, because delayed events are only retried
        5 times (with ~30 seconds between each try), some delayed events
        may be dropped and **never** sent to your machine.

        This exists **purely** to stop a runaway machine instance that is
        stuck in a loop of creating too many events.

        This endpoint requires admin access.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: instanceSlug
          in: path
          description: The slug/name for the machine instance.
          required: true
          schema:
            $ref: "#/components/schemas/MachineInstanceSlug"
      security:
        - BearerAuth:
          - "instances.admin"
      requestBody:
        $ref: "#/components/requestBodies/UpdateMachineInstanceStatus"
      responses:
        "201":
          description: |
            The desired version was recorded successfully and will be applied
            the next time an event is sent to the instance from a settled state.
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
  /machines/{machineSlug}/v:
    summary: Machine definition version operations.
    description: |
      Machine definition versions are comprised of an XState machine,
      an `allowRead` function, and an `allowWrite` function.

      They are immutable and identified by an ID.
      The `clientInfo` field is informational only.
    post:
      tags:
        - Machine versions
      summary: Provisionally create a new machine definition version.
      description: |
        This operation returns a code upload URL and fields that can be used
        to upload the code for the machine definition version.

        Once the code is uploaded, call `PUT /machines/:machineSlug/v/:machineDefinitionVersionId`
        with the `machineDefinitionVersionId` returned from this operation to
        finalize the creation of the machine definition version.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition this version is related to.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: gzip
          in: query
          description: Will the code be uploaded gzipped?
          required: false
          schema:
            type: boolean
      security:
        - BearerAuth:
          - "machine-versions.write"
      requestBody:
        $ref: "#/components/requestBodies/ProvisionallyCreateMachineDefinitionVersion"
      responses:
        "200":
          description: |
            The machine definition version was provisionally created successfully.

            Now, post the code for the machine definition version as follows:

            ```
            const { codeUploadFields, codeUploadUrl } = await provisionalVersionCreationResponse.json();
            const uploadForm = new FormData();
            for (const [key, value] of Object.entries(codeUploadFields)) {
              uploadForm.append(key, value as string);
            }
            uploadForm.set("content-type", "application/javascript");
            uploadForm.append(
              "file",
              new Blob(["javascript-code-here"], {
                type: "application/javascript",
              }),
              "your-file-name.js",
            );
            const uploadRes = await fetch(
              codeUploadUrl,
              {
                method: "POST",
                body: uploadForm,
              },
            );
            ```
            
            And then finalize the creation of the machine definition version by
            calling `PUT /machines/:machineSlug/v/:machineDefinitionVersionId` with
            the `machineDefinitionVersionId` returned from this operation.
          content:
            "application/json":
              schema:
                type: object
                required:
                  - machineVersionId
                  - codeUploadUrl
                  - codeUploadFields
                properties:
                  machineVersionId:
                    $ref: "#/components/schemas/SignedMachineVersionId"
                  codeUploadUrl:
                    type: string
                    description: The URL to upload the machine definition version code to.
                  codeUploadFields:
                    type: object
                    description: The fields that must be included as form data in the upload request.
                    additionalProperties:
                      type: string
        "403":
          $ref: "#/components/responses/Forbidden"
        "400":
          $ref: "#/components/responses/BadRequest"
  /machines/{machineSlug}/v/{signedMachineVersionId}:
    put:
      tags:
        - Machine versions
      summary: Finalize creation of a machine definition version.
      description: |
        After retrieving the `machineDefinitionVersionId` and code upload
        instructions from `POST /machines/:machineSlug/v`, and after
        uploading the code as described, call this operation to finalize
        the creation of the machine definition version.

        After this operation, you can create instances of the machine
        definition with  this version.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition this version is related to.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: signedMachineVersionId
          in: path
          description: The signed machine version id returned from `POST /machines/:machineSlug/v`.
          required: true
          schema:
            $ref: "#/components/schemas/SignedMachineVersionId"
      security:
        - BearerAuth:
          - "machine-versions.write"
      requestBody:
        $ref: "#/components/requestBodies/CreateMachineDefinitionVersion"
      responses:
        "200":
          description: The version was created.
          content:
            "application/json":
              schema:
                type: object
                required:
                  - machineVersionId
                properties:
                  machineVersionId:
                    $ref: "#/components/schemas/MachineVersionId"
  /machines/{machineSlug}/migrations:
    post:
      tags:
        - Machine version migrations
      summary: Provisionally create a new machine version migration.
      description: |
        This operation returns a code upload URL and fields that can be used
        to upload the code for the machine version migration.

        Once the code is uploaded, call `PUT /machines/:machineSlug/migrations/:machineVersionMigrationId`
        with the `machineVersionMigrationId` returned from this operation to
        finalize the creation of the machine version migration.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition this version is related to.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: gzip
          in: query
          description: Will the code be uploaded gzipped?
          required: false
          schema:
            type: boolean
      security:
        - BearerAuth:
          - "machine-versions.write"
      requestBody:
        $ref: "#/components/requestBodies/ProvisionallyCreateMachineVersionMigration"
      responses:
        "200":
          description: |
            The machine version migration was provisionally created successfully.

            Now, post the code for the machine version migration as follows:

            ```
            const { codeUploadFields, codeUploadUrl } = await provisionalVersionMigrationCreationResponse.json();
            const uploadForm = new FormData();
            for (const [key, value] of Object.entries(codeUploadFields)) {
              uploadForm.append(key, value as string);
            }
            uploadForm.set("content-type", "application/javascript");
            uploadForm.append(
              "file",
              new Blob(["javascript-code-here"], {
                type: "application/javascript",
              }),
              "your-file-name.js",
            );
            const uploadRes = await fetch(
              codeUploadUrl,
              {
                method: "POST",
                body: uploadForm,
              },
            );
            ```
            
            And then finalize the creation of the machine version migration by
            calling `PUT /machines/:machineSlug/migrations/:machineVersionMigrationId` with
            the `machineVersionMigrationId` returned from this operation.
          content:
            "application/json":
              schema:
                type: object
                required:
                  - machineVersionMigrationId
                  - codeUploadUrl
                  - codeUploadFields
                properties:
                  machineVersionMigrationId:
                    $ref: "#/components/schemas/SignedMachineVersionMigrationId"
                  codeUploadUrl:
                    type: string
                    description: The URL to upload the machine definition version code to.
                  codeUploadFields:
                    type: object
                    description: The fields that must be included as form data in the upload request.
                    additionalProperties:
                      type: string
        "403":
          $ref: "#/components/responses/Forbidden"
        "400":
          $ref: "#/components/responses/BadRequest"
  /machines/{machineSlug}/migrations/{signedMachineVersionMigrationId}:
    put:
      tags:
        - Machine version migrations
      summary: Finalize creation of a machine version migration.
      description: |
        After retrieving the `machineVersionMigrationId` and code upload
        instructions from `POST /machines/:machineSlug/migrations`, and after
        uploading the code as described, call this operation to finalize
        the creation of the machine version migration.

        After this operation, you can upgrade existing machine instances
        using this migration.
      parameters:
        - name: machineSlug
          in: path
          description: The slug/name for the machine definition this version is related to.
          required: true
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: signedMachineVersionMigrationId
          in: path
          description: The signed machine version id returned from `POST /machines/:machineSlug/v`.
          required: true
          schema:
            $ref: "#/components/schemas/SignedMachineVersionMigrationId"
      security:
        - BearerAuth:
          - "machine-versions.write"
      requestBody:
        $ref: "#/components/requestBodies/CreateMachineVersionMigration"
      responses:
        "200":
          description: The version was created.
          content:
            "application/json":
              schema:
                type: object
                required:
                  - machineVersionMigrationId
                properties:
                  machineVersionId:
                    $ref: "#/components/schemas/MachineVersionMigrationId"
  /logs:
    get:
      tags:
        - Logs
      summary: Retrieve logs for a time range.
      description: |
        Retrieve logs starting at the `from` time, optionally
        filtered by `to`, `machine`, `instance`, and `version`.

        You will receive at most 100 log entries (each consisting
        of potentially multiple lines) but you may receive fewer
        entries due to various partitioning schemes.

        You may retry the call by specifying the returned `maxTimestamp`
        as the new `from` time to retrieve additional logs.
      parameters:
        - name: from
          in: query
          description: The ISO-8601 timestamp of the earilest-timestamped log to retrieve
          required: true
          schema:
            $ref: "#/components/schemas/Timestamp"
        - name: to
          in: query
          description: The ISO-8601 timestamp of the latest-timestamped log to retrieve
          required: false
          schema:
            $ref: "#/components/schemas/Timestamp"
        - name: machine
          in: query
          description: The name of the machine to retrieve logs for
          required: false
          schema:
            $ref: "#/components/schemas/MachineSlug"
        - name: instance
          in: query
          description: The name of the machine instance to retrieve logs for
          required: false
          schema:
            $ref: "#/components/schemas/MachineInstanceSlug"
        - name: version
          in: query
          description: The id of the machine version to retrieve logs for
          required: false
          schema:
            $ref: "#/components/schemas/MachineVersionId"
      security:
        - BearerAuth:
          - "logs.read"
      responses:
        "200":
          description: The requested logs.
          content:
            "application/json":
              schema:
                type: object
                required:
                  - maxTimestamp
                  - logs
                properties:
                  maxTimestamp:
                    $ref: "#/components/schemas/Timestamp"
                  logs:
                    type: array
                    items:
                      type: object
                      required:
                        - timestamp
                        - orgId
                        - machineName
                        - instanceName
                        - machineVersionId
                        - outputType
                        - log
                      properties:
                        timestamp:
                          $ref: "#/components/schemas/Timestamp"
                        orgId:
                          type: string
                          description: The ID of the organization that owns the machines that produced this log.
                        machineName:
                          $ref: "#/components/schemas/MachineSlug"
                        instanceName:
                          $ref: "#/components/schemas/MachineInstanceSlug"
                        machineVersionId:
                          $ref: "#/components/schemas/MachineVersionId"
                        outputType:
                          type: string
                          enum: ["stdout", "stderr"]
                        log:
                          type: string
                          description: Raw log output
  /rt:
    get:
      tags:
        - Realtime
      summary: Subscribe to real-time updates of machine instances.
      description: |
        This is a websocket endpoint.
        Connect and send WSToServerMsg messages and receive WSToClientMsg messages.
      parameters:
        - name: token
          in: query
          description: JWT signed with your State Backed key. Same as the token typically passed in the authorization header.
          required: true
          schema:
            type: string

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  requestBodies:
    CreateMachineDefinition:
      description: Request to create a machine definition.
      content:
        "application/json":
          schema:
            type: object
            required:
              - slug
            properties:
              slug:
                $ref: "#/components/schemas/MachineSlug"
    ProvisionallyCreateMachineDefinitionVersion:
      description: Request to provisionally create a machine definition version.
      content:
        "application/json":
          schema:
            type: object
    CreateMachineDefinitionVersion:
      description: Finalize creation of a machine definition version.
      content:
        "application/json":
          schema:
            type: object
            properties:
              clientInfo:
                type: string
                description: |
                  Informational only. Any string that describes this version.
                  Good uses would be a semantic version number or git commit.
              makeCurrent:
                type: boolean
                description: |
                  Whether to make this version the current version for the machine definition.
                  If `true`, the current version will be set to this version.
                  If `false`, the current version will not be changed.
    ProvisionallyCreateMachineVersionMigration:
      description: Request to provisionally create a machine version migration.
      content:
        "application/json":
          schema:
            type: object
            required:
              - fromMachineVersionId
              - toMachineVersionId
            properties:
              fromMachineVersionId:
                $ref: "#/components/schemas/MachineVersionId"
              toMachineVersionId:
                $ref: "#/components/schemas/MachineVersionId"
    CreateMachineVersionMigration:
      description: Finalize creation of a machine version migration.
      content:
        "application/json":
          schema:
            type: object
    CreateMachineInstance:
      description: |
        Request to create an instance of a machine.

        If machineVersionId is provided, creates an instance of the machine
        definition version with that ID. Otherwise, creates an instance of the
        current version of the machine definition.
      content:
        "application/json":
          schema:
            type: object
            required:
              - slug
            properties:
              slug:
                $ref: "#/components/schemas/MachineInstanceSlug"
              context:
                type: object
                description: |
                  The initial context for the machine instance.
                  Defaults to `{}`.
                additionalProperties: true
              machineVersionId:
                allOf:
                  - $ref: "#/components/schemas/MachineVersionId"
                  - description: |
                      The ID of the machine definition version to use for this instance.
                      If not provided, creates an instance of the current version of the machine definition.
    SendMachineInstanceEvent:
      description: |
        Request to send an event to an instance of a machine.
      content:
        "application/json":
          schema:
            type: object
            required:
              - event
            properties:
              event:
                $ref: "#/components/schemas/Event"
    UpdateDesiredMachineInstanceVersion:
      description: |
        Request to update the machine version for an existing instance.
      content:
        "application/json":
          schema:
            type: object
            required:
              - targetMachineVersionId
            properties:
              targetMachineVersionId:
                $ref: "#/components/schemas/MachineVersionId"
    UpdateMachineInstanceStatus:
      description: |
        Request to update the status of an existing instance.
      content:
        "application/json":
          schema:
            type: object
            required:
              - status
            properties:
              status:
                $ref: "#/components/schemas/MachineInstanceStatus"
    DeleteMachine:
      description: Validation parameters to prove that you really do want to delete the machine.
      content:
        "application/json":
          schema:
            type: object
            description: Validation parameters to prove that you really do want to delete the machine.
            required:
              - dangerDataWillBeDeletedForever
              - hmacSha256OfMachineNameWithMachineNameKey
            properties:
              dangerDataWillBeDeletedForever:
                type: boolean
                description: Just to ensure that you understand the ramifications of this action.
                const: true
              hmacSha256OfMachineNameWithMachineNameKey:
                type: string
                description: |
                  This parameter serves to verify that you have read the documentation prior to
                  deleting a machine and have taken the time to consider whether you really want to do so.

                  Provide `base64urlEncode(hmacSha256(key = "machine name", "machine name"))`
    DeleteMachineInstance:
      description: Validation parameters to prove that you really do want to delete the instance.
      content:
        "application/json":
          schema:
            type: object
            description: Validation parameters to prove that you really do want to delete the instance.
            required:
              - dangerDataWillBeDeletedForever
              - hmacSha256OfMachineInstanceNameWithMachineNameKey
            properties:
              dangerDataWillBeDeletedForever:
                type: boolean
                description: Just to ensure that you understand the ramifications of this action.
                const: true
              hmacSha256OfMachineInstanceNameWithMachineNameKey:
                type: string
                description: |
                  This parameter serves to verify that you have read the documentation prior to
                  deleting a machine and have taken the time to consider whether you really want to do so.

                  Provide `base64urlEncode(hmacSha256(key = "machine name", "machine instance name"))`

  responses:
    BadRequest:
      description: The request was malformed.
      content:
        "application/json":
          schema:
            type: object
            properties:
              error:
                type: string
                description: A description of the error.
              code:
                type: string
                description: |
                  A code specifying the type of error.

                  - `specify-org` indicates that the user has access to multiple orgs and the operation requires specifying an organization. Pass the `x-statebacked-org-id` header to specify an org ID.
                  - `invalid-parameter` indicates that one of the provided parameters was incorrect
                enum:
                  - specify-org
                  - invalid-parameter
              parameter:
                type: string
                description: The name of the invalid parameter
    Forbidden:
      description: The request was unauthorized.
      content:
        "application/json":
          schema:
            type: object
            properties:
              error:
                type: string
                description: A description of the error.
              code:
                type: string
                description: A code specifying the type of error.
                enum:
                  - missing-scope
                  - rejected-by-machine-authorizer
                  - missing-user
                  - missing-org
    Conflict:
      description: The resource already exists.
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: string
                description: Machine-readable identifier for the type of error
                enum:
                  - invalid-state
              error:
                type: string
                description: Human-readable identifier for the error

  schemas:
    MachineSlug:
      type: string
      description: An identifier for the machine definition. Must be unique within your organization.
      pattern: "^[a-zA-Z0-9_-]{1,128}$"
      minLength: 1
      example: "my-machine"
    SignedMachineVersionId:
      type: string
      description: The signed machine definition version ID.
    SignedMachineVersionMigrationId:
      type: string
      description: The signed machine version migration ID.
    MachineVersionId:
      type: string
      description: The ID of a machine definition version.
    MachineVersionMigrationId:
      type: string
      description: The ID of a machine version migration.
    MachineInstanceSlug:
      type: string
      description: An identifier for the machine instance. Must be unique within the instances for the associated machine definition.
      pattern: "^[a-zA-Z0-9_-]{1,128}$"
      minLength: 1
      example: "user-1234"
    MachineInstanceStatus:
      type: string
      description: The status of a machine instance.
      enum:
        - running
        - paused
    StateValue:
      description: |
        The state of the machine instance.

        For a machine instance with in a single, top-level state, this will be a string.
        For a machine instance in a hierarchically-nested state, it will be an object
        mapping parent states to child states.
        For a machine instance in a parallel state, it will be an object with multiple
        keys.
      oneOf:
        - $ref: "#/components/schemas/SimpleStateValue"
        - $ref: "#/components/schemas/CompoundStateValue"
    SimpleStateValue:
      type: string
      description: A simple state
    CompoundStateValue:
      type: object
      description: A compound state
      additionalProperties:
        $ref: "#/components/schemas/StateValue"
    State:
      type: object
      description: |
        The state of a machine instance.
      examples:
        Simple state without public context:
          value:
            state: "idle"
            states:
              - idle
        Hierarchical state with public context:
          value:
            state:
              parent:
                nested1: "idle"
            states:
              - parent
              - nested1
              - idle
            publicContext:
              user: "u_1234"
        Parallel state with public context:
          values:
            state:
              parent:
                nested1: "idle"
                nested2: "idle"
            states:
              - parent
              - nested1
              - nested2
              - idle
            publicContext:
              connectedDocuments:
                - doc_1234
                - doc_5678
      required:
        - state
        - states
      properties:
        state:
          $ref: "#/components/schemas/StateValue"
        states:
          description: |
            A flattened array of the states that the machine instance is in.
            This may be easier to work with than the `state` property.
          type: array
          items:
            type: string
        publicContext:
          description: |
            The public context of the machine instance.

            This includes all context under the `public` key.
          type: object
          additionalProperties: true
    Event:
      description: |
        An event to send to a machine instance.
      oneOf:
        - $ref: "#/components/schemas/EventWithPayload"
        - $ref: "#/components/schemas/EventWithoutPayload"
    EventWithPayload:
      type: object
      description: |
        An event to send to a machine instance with a payload.

        Event types and payloads are user-defined for a given machine definition.
      required:
        - type
      additionalProperties: true
      properties:
        type:
          type: string
          description: |
            The type of the event.
    EventWithoutPayload:
      type: string
      description: |
        An event to send to a machine.

        Event types are user-defined for a given machine definition.
    Timestamp:
      type: string
      description: |
        A timestamp
      format: date-time
    WSToClientInstanceUpdateMsg:
      type: object
      description: |
        Websocket message sent to the client when an instance has been updated.
        Clients will receive instance update messages after subscribing to an instance.
      required:
        - type
        - machineName
        - machineInstanceName
        - publicContext
        - state
      properties:
        type:
          type: string
          const: instance-update
        machineName:
          $ref: "#/components/schemas/MachineSlug"
        machineInstanceName:
          $ref: "#/components/schemas/MachineInstanceSlug"
        publicContext:
          type: object
          additionalProperties: true
        state:
          $ref: "#/components/schemas/StateValue"
    WSToClientErrorMsg:
      type: object
      description: |
        Websocket message sent to the client to indicate that an error has occurred
        in processing a previously-sent message, identified by `requestId`.
      required:
        - type
        - requestId
        - status
      properties:
        type:
          type: string
          const: error
        requestId:
          type: string
          description: Request ID that caused the error.
        status:
          type: number
          description: HTTP status code corresponding to the error.
        code:
          type: string
          description: Error code
    WSToClientMsg:
      description: Websocket messages that may be sent to the client
      oneOf:
        - $ref: "#/components/schemas/WSToClientInstanceUpdateMsg"
        - $ref: "#/components/schemas/WSToClientErrorMsg"
    WSToServerSubscribeToInstanceMsg:
      type: object
      description: |
        Websocket message sent to the server to subscribe to a machine instance
      required:
        - type
        - requestId
        - machineName
        - machineInstanceName
      properties:
        type:
          type: string
          const: subscribe-to-instance
        requestId:
          type: string
          description: ID for this request. Must be unique per connection. Used to associate errors with the request.
        machineName:
          $ref: "#/components/schemas/MachineSlug"
        machineInstanceName:
          $ref: "#/components/schemas/MachineInstanceSlug"
    WSToServerUnsubscribeFromInstanceMsg:
      type: object
      description: |
        Websocket message sent to the server to unsubscribe from a machine instance
      required:
        - type
        - requestId
        - machineName
        - machineInstanceName
      properties:
        type:
          type: string
          const: unsubscribe-from-instance
        requestId:
          type: string
          description: ID for this request. Must be unique per connection. Used to associate errors with the request.
        machineName:
          $ref: "#/components/schemas/MachineSlug"
        machineInstanceName:
          $ref: "#/components/schemas/MachineInstanceSlug"
    WSToServerPingMsg:
      type: object
      description: |
        Websocket message sent to the server to keep the connection and subscriptions alive.
        Must be sent at least every 5 minutes or the connection and subscriptions will be canceled
        and will need to be reestablished.
      required:
        - type
      properties:
        type:
          type: string
          const: ping
    WSToServerMsg:
      description: Websocket messages that may be sent to the server.
      oneOf:
        - $ref: "#/components/schemas/WSToServerSubscribeToInstanceMsg"
        - $ref: "#/components/schemas/WSToServerUnsubscribeFromInstanceMsg"
        - $ref: "#/components/schemas/WSToServerPingMsg"

